{"version":3,"sources":["components/header/header.tsx","types.ts","adapterUtils.ts","adapter.ts","consts.ts","store/actions.ts","components/filter/filter.tsx","store/selectors.ts","utils.ts","components/messages/messages.tsx","components/bottom-pagination/bottom-pagination.tsx","components/app/app.tsx","store/reducer.ts","index.tsx"],"names":["Header","ActionType","className","now","Date","monthAgo","setMonth","getMonth","getRndInteger","min","max","Math","floor","random","MUSIC_LIST","getMessage","item","arr","start","end","rndMusicTrack","length","rndDate","getTime","From","To","MIME","Duration","id","uniqueId","received","from","_text","to","date","localTime","timeShift","Number","_attributes","text","mime","class","estimatedSize","subtype","type","disposition","dispositionFilename","dispositionVoice","partId","partID","duration","adaptMessages","xml","json","convert","xml2json","compact","spaces","JSON","parse","Root","Data","map","FILTER_BY_TIME_TYPES","value","FILTER_BY_DURATION_TYPES","setMessages","createAction","SetMessages","messages","payload","setPaginationAction","SetPagination","number","setFilterByTimeAction","SetFilterByTime","setFilterByNumAction","SetFilterByNum","string","setFilterByDurationAction","SetFilterByDuration","Filter","dispatch","useDispatch","useSelector","state","filterByTimeType","filterByNumType","filterByDurationType","FormControl","InputLabel","Select","labelId","label","onChange","evt","target","MenuItem","TextField","variant","Button","onClick","getMessages","sort","a","b","filter","today","setHours","getFullYear","filterByTime","str","includes","filterByDuration","Messages","pagination","paginatedMessages","_item","i","toLocaleString","durationMin","durationSec","controls","src","BottomPagination","count","ceil","Pagination","page","color","_evt","App","reducer","createReducer","builder","addCase","action","store","createStore","applyMiddleware","thunkMiddleware","axios","get","response","data","toast","info","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOASeA,IC+BHC,ED/BGD,EATf,WAEE,OACE,wBAAQE,UAAU,SAAlB,SACE,0H,oHCoCMD,K,0BAAAA,E,8BAAAA,E,kCAAAA,E,gCAAAA,E,2CAAAA,M,6CCvBNE,EAAM,IAAIC,KACHC,EAAW,IAAID,KAAKD,EAAIG,SAASH,EAAII,WAAa,IAIlDC,EAAgB,SAACC,EAAaC,GAAd,OAA8BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAASA,GAEzFK,EAAa,CACxB,wEACA,yDACA,+DACA,6DCvBWC,EAAa,SAACC,GACzB,ID8B8BC,EAhBLC,EAAaC,ECdhCC,GD8BwBH,EC9BQH,GAAYN,EDgChC,EADNS,EAAII,OAAS,IC9BnBC,GDamBJ,ECbEb,EDaWc,ECbD,IAAIf,KDaW,IAAIA,KAAKc,EAAMK,UAAYZ,KAAKE,UAAYM,EAAII,UAAYL,EAAMK,aCZ/GC,EAA4BR,EAA5BQ,KAAMC,EAAsBT,EAAtBS,GAAIC,EAAkBV,EAAlBU,KAAMC,EAAYX,EAAZW,SA6BvB,MA3ByB,CACvBC,GAAIC,MACJC,SAAUR,EACVS,KAAMP,EAAKQ,OAAS,GACpBC,GAAIR,EAAGO,OAAS,GAChBE,KAAM,CACJC,UAAWb,EACXc,UAAWC,OAAOrB,EAAKZ,KAAKkC,YAAYF,YAAc,EACtDG,KAAMvB,EAAKZ,KAAK4B,OAElBQ,KAAM,CACJC,MAAOf,EAAKY,YAAYG,OAAS,GACjCC,cAAeL,OAAOX,EAAKY,YAAYI,gBAAkB,EACzDC,QAASjB,EAAKY,YAAYK,SAAW,GACrCC,KAAMlB,EAAKY,YAAYM,MAAQ,GAC/BJ,KAAM,CACJK,YAAanB,EAAKA,KAAKY,YAAYO,aAAe,GAClDC,oBAAqB1B,GAAiB,GACtC2B,iBAAkBrB,EAAKA,KAAKY,YAAY,sBAAwB,GAChEI,cAAeL,OAAOX,EAAKA,KAAKY,YAAYI,eAC5CM,OAAQtB,EAAKA,KAAKY,YAAYW,QAAU,GACxCN,QAASjB,EAAKA,KAAKY,YAAYK,SAAW,GAC1CC,KAAMlB,EAAKA,KAAKY,YAAYM,MAAQ,KAGxCM,SAAUb,OAAOV,EAASK,SAKjBmB,EAAgB,SAACC,GAC5B,IAAMC,EAAOC,IAAQC,SAASH,EAAK,CAACI,SAAS,EAAMC,OAAQ,IAE3D,OADaC,KAAKC,MAAMN,GACZO,KAAKC,KAAKC,KAAI,SAAC9C,GAAD,OAAcD,EAAWC,OCxCxC+C,EAAuB,CAClC,CACEC,MAAO,MACPzB,KAAM,kEAER,CACEyB,MAAO,QACPzB,KAAM,2DAER,CACEyB,MAAO,YACPzB,KAAM,+CAER,CACEyB,MAAO,OACPzB,KAAM,4GAER,CACEyB,MAAO,QACPzB,KAAM,0FAER,CACEyB,MAAO,YACPzB,KAAM,2FAGG0B,EAA2B,CACtC,CACED,MAAO,IACPzB,KAAM,uDAER,CACEyB,MAAO,IACPzB,KAAM,iDAER,CACEyB,MAAO,IACPzB,KAAM,iDAER,CACEyB,MAAO,KACPzB,KAAM,mDCjCG2B,EAAcC,YACzBlE,EAAWmE,aACX,SAACC,GAAD,MAA0B,CACxBC,QAASD,MAGAE,EAAsBJ,YACjClE,EAAWuE,eACX,SAACC,GAAD,MAAqB,CACnBH,QAASG,MAGAC,EAAwBP,YACnClE,EAAW0E,iBACX,SAAC/B,GAAD,MAAmB,CACjB0B,QAAS1B,MAGAgC,EAAuBT,YAClClE,EAAW4E,gBACX,SAACC,GAAD,MAAqB,CACnBR,QAASQ,MAGAC,EAA4BZ,YACvClE,EAAW+E,qBACX,SAACpC,GAAD,MAAmB,CACjB0B,QAAS1B,MCqDEqC,MArFf,WACE,IAAMC,EAAWC,cACjB,EAAkEC,aAAY,SAACC,GAAD,OAAkBA,KAAzFC,EAAP,EAAOA,iBAAkBC,EAAzB,EAAyBA,gBAAiBC,EAA1C,EAA0CA,qBAE1C,OACE,qBAAKtF,UAAU,SAAf,SACE,qBAAIA,UAAU,eAAd,UACE,oBAAIA,UAAU,eAAd,SACE,eAACuF,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAY9D,GAAG,oBAAf,kDACA,cAAC+D,EAAA,EAAD,CACEC,QAAQ,oBACRhE,GAAG,4BACHoC,MAAOsB,EACPO,MAAM,uCACNC,SAAU,SAACC,GACTb,EAASR,EAAsBqB,EAAIC,OAAOhC,QAC1CkB,EAASX,EAAoB,KAPjC,SAUGR,EAAqBD,KAAI,SAAC9C,GAAD,OACxB,cAACiF,EAAA,EAAD,CAEEjC,MAAOhD,EAAKgD,MAFd,SAIGhD,EAAKuB,MAHDvB,EAAKgD,iBASpB,oBAAI9D,UAAU,eAAd,SACE,cAACgG,EAAA,EAAD,CACEtE,GAAG,SACHiE,MAAM,iCACNM,QAAQ,WACRnC,MAAOuB,EACPO,SAAU,SAACC,GACTb,EAASN,EAAqBmB,EAAIC,OAAOhC,QACzCkB,EAASX,EAAoB,SAInC,oBAAIrE,UAAU,eAAd,SACE,eAACuF,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAY9D,GAAG,wBAAf,sFACA,cAAC+D,EAAA,EAAD,CACEC,QAAQ,wBACRhE,GAAG,kBACHoC,MAAOwB,EACPK,MAAM,2EACNC,SAAU,SAACC,GACTb,EAASH,EAA0BgB,EAAIC,OAAOhC,QAC9CkB,EAASX,EAAoB,KAPjC,SAUGN,EAAyBH,KAAI,SAAC9C,GAAD,OAC5B,cAACiF,EAAA,EAAD,CAEEjC,MAAOhD,EAAKgD,MAFd,SAIGhD,EAAKuB,MAHDvB,EAAKgD,iBASpB,oBAAI9D,UAAU,eAAd,SACE,cAACkG,EAAA,EAAD,CACED,QAAQ,YACRE,QAAS,WACPnB,EAASR,EAAsB,KAC/BQ,EAASN,EAAqB,KAC9BM,EAASH,EAA0B,KACnCG,EAASX,EAAoB,KANjC,2G,QCvEG+B,EAAc,SAACjB,GAC1B,IAAOhB,EAAqEgB,EAArEhB,SAAUiB,EAA2DD,EAA3DC,iBAAkBC,EAAyCF,EAAzCE,gBAAiBC,EAAwBH,EAAxBG,qBAEpD,OAAO,YAAInB,GACRkC,MAAK,SAACC,EAAYC,GAAb,OAA4BA,EAAE3E,SAASP,UAAYiF,EAAE1E,SAASP,aACnEmF,QAAO,SAAC1F,GAAD,OCRgB,SAACkB,EAAYU,GACvC,IAEMzC,EAAM,IAAIC,KACVuG,GAAQ,IAAIvG,MAAOwG,SAAS,EAAG,EAAG,EAAG,GAE3C,OAAQhE,GACN,IAAK,QACH,OAAO+D,IAAU,IAAIvG,KAAK8B,EAAKX,WAAWqF,SAAS,EAAG,EAAG,EAAG,GAC9D,IAAK,YACH,OAAOD,IAAU,IAAIvG,KAAK8B,EAAKX,WAAWqF,SAAS,EAAG,EAAG,EAAG,GATpD,MAUV,IAAK,OACH,OAAOD,EAAQ,IAAIvG,KAAK8B,EAAKX,WAAWqF,SAAS,EAAG,EAAG,EAAG,GAVjD,OAWX,IAAK,QACH,OAAOzG,EAAII,aAAe2B,EAAK3B,YAAcJ,EAAI0G,gBAAkB3E,EAAK2E,cAC1E,IAAK,YACH,OAAO1G,EAAII,WAAa,IAAM2B,EAAK3B,YAAcJ,EAAI0G,gBAAkB3E,EAAK2E,cAC9E,QACE,OAAO,GDVSC,CAAa9F,EAAKc,SAAUwD,MAC7CoB,QAAO,SAAC1F,GAAD,OCagB+F,EDbM/F,EAAKe,KCaEa,EDbI2C,ECaawB,EAAIC,SAASpE,GAA5C,IAACmE,EAAanE,KDZpC8D,QAAO,SAAC1F,GAAD,OCcoB,SAACkC,EAAkBN,GACjD,OAAQA,GACN,IAAK,IACH,OAAOM,EAAW,GACpB,IAAK,IACH,OAAOA,EAAW,IACpB,IAAK,IACH,OAAOA,EAAW,IACpB,IAAK,KACH,OAAOA,EAAW,IACpB,QACE,OAAO,GDzBS+D,CAAiBjG,EAAKkC,SAAUsC,OEgCvC0B,MApCf,WACE,IAAM7C,EAAWe,YAAYkB,GACtBa,EAAc/B,aAAY,SAACC,GAAD,OAAkBA,KAA5C8B,WACDC,EAAoB,YAAI/C,GAAUqC,QAAO,SAACW,EAAOC,GAAR,OAAcA,GLR9B,GKQmCH,GAAkCG,ELRrE,GKQyEH,ELRzE,MKU/B,OACE,qBAAKjH,UAAU,WAAf,SACE,wBAAOA,UAAU,kBAAjB,UACE,gCACE,qBAAIA,UAAU,eAAd,UACE,oBAAIA,UAAU,eAAd,sCACA,oBAAIA,UAAU,eAAd,4CACA,oBAAIA,UAAU,eAAd,sFACA,oBAAIA,UAAU,kCAAd,8GAGJ,gCACGkH,EAAkBtD,KAAI,SAAC9C,GACtB,IAAMkB,EAAOlB,EAAKc,SAASyF,iBACrBC,EAAc7G,KAAKC,MAAMI,EAAKkC,SAAW,IAA3B,UAAoCvC,KAAKC,MAAMI,EAAKkC,SAAW,IAA/D,uBAA2E,GACzFuE,EAAczG,EAAKkC,SAAW,GAAhB,UAAwBlC,EAAKkC,SAAW,GAAxC,uBAAmD,GACvE,OACE,qBAAIhD,UAAU,eAAd,UACE,oBAAIA,UAAU,eAAd,SAA8BgC,IAC9B,oBAAIhC,UAAU,eAAd,SAA8Bc,EAAKe,OACnC,oBAAI7B,UAAU,eAAd,mBAAiCsH,EAAjC,YAAgDC,KAChD,oBAAIvH,UAAU,kCAAd,SAAgD,uBAAOwH,UAAQ,EAACC,IAAK3G,EAAKwB,KAAKA,KAAKM,0BAJpD9B,EAAKY,e,SCEtCgG,MAtBf,WACE,IAAM1C,EAAWC,cACXd,EAAWe,YAAYkB,GACtBa,EAAc/B,aAAY,SAACC,GAAD,OAAkBA,KAA5C8B,WACDU,EAAQlH,KAAKmH,KAAKzD,EAAShD,ONXF,IMa/B,OACE,qBAAKnB,UAAU,oBAAf,SACG2H,EAAQ,GACP,cAACE,EAAA,EAAD,CACEF,MAAOA,EACPG,KAAMb,EAAa,EACnBc,MAAM,UACNnC,SAAU,SAACoC,EAAMlE,GACfkB,EAASX,EAAoBP,EAAQ,UCLlCmE,MAXf,WACE,OACE,sBAAKjI,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCAkI,EAAUC,YARY,CAC1BhE,SAAU,GACV8C,WAAY,EACZ7B,iBAAkB,GAClBC,gBAAiB,GACjBC,qBAAsB,KAGoB,SAAC8C,GAC3CA,EACGC,QAAQrE,GAAa,SAACmB,EAAOmD,GAC5BnD,EAAMhB,SAAWmE,EAAOlE,WAEzBiE,QAAQhE,GAAqB,SAACc,EAAOmD,GACpCnD,EAAM8B,WAAaqB,EAAOlE,WAE3BiE,QAAQ7D,GAAuB,SAACW,EAAOmD,GACtCnD,EAAMC,iBAAmBkD,EAAOlE,WAEjCiE,QAAQ3D,GAAsB,SAACS,EAAOmD,GACrCnD,EAAME,gBAAkBiD,EAAOlE,WAEhCiE,QAAQxD,GAA2B,SAACM,EAAOmD,GAC1CnD,EAAMG,qBAAuBgD,EAAOlE,c,QChBpCmE,EAAQC,YACZN,EACAO,YAAgBC,MAGjBH,EAAMvD,SRwB4B,uCACjC,WAAOA,GAAP,iBAAAsB,EAAA,+EAE2BqC,IAAMC,ID5CP,qDC0C1B,OAEUC,EAFV,OAGWC,EAAQD,EAARC,KACP9D,EAAShB,EAAYf,EAAc6F,KAJvC,gDAMIC,IAAMC,KAvCU,kGAiCpB,yDADiC,uDQtBnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUZ,MAAOA,EAAjB,UACE,cAAC,IAAD,IACA,cAAC,EAAD,SAGJa,SAASC,eAAe,W","file":"static/js/main.679ac648.chunk.js","sourcesContent":["function Header(): JSX.Element {\n\n  return (\n    <header className=\"header\">\n      <h1>Голосовая почта</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import {Action} from 'redux';\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\nimport {AxiosInstance} from 'axios';\n\nexport type State = {\n  messages: Message[],\n  pagination: number,\n  filterByTimeType: string,\n  filterByNumType: string,\n  filterByDurationType: string,\n}\n\nexport type Message = {\n  id: string | undefined,\n  received: Date,\n  from: string,\n  to: string,\n  date: {\n    localTime: Date,\n    timeShift: number,\n    text: string,\n  },\n  mime: {\n    class: string,\n    estimatedSize: number,\n    subtype: string,\n    type: string,\n    mime: {\n      disposition: string,\n      dispositionFilename: string,\n      dispositionVoice: string,\n      estimatedSize: number,\n      partId: string,\n      subtype: string,\n      type: string,\n    }\n  },\n  duration: number\n};\n\nexport enum ActionType {\n  SetMessages = 'setMessages',\n  SetPagination = 'setPagination',\n  SetFilterByTime = 'setFilterByTime',\n  SetFilterByNum = 'setFilterByNum',\n  SetFilterByDuration = 'setFilterByDuration'\n}\n\nexport type ThunkActionResult<R = Promise<void>> = ThunkAction<R, State, AxiosInstance, Action>;\n\nexport type ThunkAppDispatch = ThunkDispatch<State, AxiosInstance, Action>;\n","export const convertYYYYMMDDToISOFormat = (str: string) => {\n  const date = str.split('T')[0];\n  const time = str.split('T')[1];\n\n  if (date.length !==8 || time.length < 6) {\n    return null;\n  }\n\n  const YYYY = date.slice(0, 4);\n  const MM = date.slice(4, 6);\n  const DD = date.slice(6, 8);\n  const hh = time.slice(0, 2);\n  const mm = time.slice(2, 4);\n  const ss = time.slice(4, 6);\n  return new Date(`${YYYY}-${MM}-${DD}T${hh}:${mm}:${ss}`);\n};\n\nconst now = new Date();\nexport const monthAgo = new Date(now.setMonth(now.getMonth() - 1));\n\nexport const getRndDate = (start: Date, end: Date) => new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n\nexport const getRndInteger = (min: number, max: number) => Math.floor(Math.random() * (max - min) ) + min;\n\nexport const MUSIC_LIST = [\n  'https://8.react.pages.academy/static/music/Dance_Of_The_Fireflies.mp3',\n  'https://8.react.pages.academy/static/music/Oh_Fire.mp3',\n  'https://8.react.pages.academy/static/music/Mourning_Dove.mp3',\n  'https://8.react.pages.academy/static/music/19th_Floor.mp3',\n];\n\n\ntype getRndArrayCallback = {\n  (min: number, max: number): number\n};\n\nexport const getRndArrayElem = (arr: string[], cb: getRndArrayCallback) => {\n  const max = arr.length - 1;\n  const rndInt = cb(0, max);\n  return arr[rndInt];\n};\n","import {Message} from './types';\nimport convert from 'xml-js';\nimport uniqueId from 'lodash/uniqueId';\nimport {monthAgo, getRndDate, MUSIC_LIST, getRndArrayElem, getRndInteger} from './adapterUtils';\n\nexport const getMessage = (item: any) => {\n  const rndMusicTrack = getRndArrayElem(MUSIC_LIST, getRndInteger);\n  const rndDate = getRndDate(monthAgo, new Date());\n  const {From, To, MIME, Duration} = item;\n\n  const message: Message = {\n    id: uniqueId(),\n    received: rndDate,\n    from: From._text || '',\n    to: To._text || '',\n    date: {\n      localTime: rndDate,\n      timeShift: Number(item.Date._attributes.timeShift) || 0,\n      text: item.Date._text,\n    },\n    mime: {\n      class: MIME._attributes.class || '',\n      estimatedSize: Number(MIME._attributes.estimatedSize) || 0,\n      subtype: MIME._attributes.subtype || '',\n      type: MIME._attributes.type || '',\n      mime: {\n        disposition: MIME.MIME._attributes.disposition || '',\n        dispositionFilename: rndMusicTrack || '',\n        dispositionVoice: MIME.MIME._attributes['Disposition-voice'] || '',\n        estimatedSize: Number(MIME.MIME._attributes.estimatedSize),\n        partId: MIME.MIME._attributes.partID || '',\n        subtype: MIME.MIME._attributes.subtype || '',\n        type: MIME.MIME._attributes.type || '',\n      },\n    },\n    duration: Number(Duration._text),\n  };\n  return message;\n};\n\nexport const adaptMessages = (xml: string): Message[] => {\n  const json = convert.xml2json(xml, {compact: true, spaces: 2});\n  const data = JSON.parse(json);\n  return data.Root.Data.map((item:any) => getMessage(item));\n};\n","export const MESSAGES_URL = 'https://bellavin.github.io/artsofte/mock/data.xml';\nexport const MESSAGES_PER_PAGE = 10;\n\nexport const FILTER_BY_TIME_TYPES = [\n  {\n    value: 'all',\n    text: 'За все время',\n  },\n  {\n    value: 'today',\n    text: 'За сегодня',\n  },\n  {\n    value: 'yesterday',\n    text: 'За вчера',\n  },\n  {\n    value: 'week',\n    text: 'За последнюю неделю',\n  },\n  {\n    value: 'month',\n    text: 'За текущий месяц',\n  },\n  {\n    value: 'lastMonth',\n    text: 'За прошлый месяц',\n  },\n];\nexport const FILTER_BY_DURATION_TYPES = [\n  {\n    value: '1',\n    text: 'До 1 минуты',\n  },\n  {\n    value: '3',\n    text: 'До 3 минут',\n  },\n  {\n    value: '5',\n    text: 'До 5 минут',\n  },\n  {\n    value: '10',\n    text: 'До 10 минут',\n  },\n];\n","import {createAction} from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {toast} from 'react-toastify';\nimport {Message, ActionType} from '../types';\nimport {adaptMessages} from '../adapter';\nimport {ThunkActionResult} from '../types';\nimport {MESSAGES_URL} from '../consts';\n\n\nconst ERROR_MESSAGE = 'Что-то пошло не так';\n\nexport const setMessages = createAction(\n  ActionType.SetMessages,\n  (messages: Message[]) => ({\n    payload: messages,\n  }),\n);\nexport const setPaginationAction = createAction(\n  ActionType.SetPagination,\n  (number: number) => ({\n    payload: number,\n  }),\n);\nexport const setFilterByTimeAction = createAction(\n  ActionType.SetFilterByTime,\n  (type: string) => ({\n    payload: type,\n  }),\n);\nexport const setFilterByNumAction = createAction(\n  ActionType.SetFilterByNum,\n  (string: string) => ({\n    payload: string,\n  }),\n);\nexport const setFilterByDurationAction = createAction(\n  ActionType.SetFilterByDuration,\n  (type: string) => ({\n    payload: type,\n  }),\n);\nexport const fetchMessagesAction = (): ThunkActionResult =>\n  async (dispatch): Promise<void> => {\n    try {\n      const response = await axios.get(MESSAGES_URL);\n      const {data} = response;\n      dispatch(setMessages(adaptMessages(data)));\n    } catch (error) {\n      toast.info(ERROR_MESSAGE);\n    }\n  };\n","import {useSelector, useDispatch} from 'react-redux';\nimport {TextField, Select, MenuItem, Button, InputLabel, FormControl} from '@mui/material';\nimport {setFilterByTimeAction, setFilterByNumAction, setFilterByDurationAction, setPaginationAction} from '../../store/actions';\nimport {FILTER_BY_TIME_TYPES, FILTER_BY_DURATION_TYPES} from '../../consts';\nimport {State} from '../../types';\n\nfunction Filter(): JSX.Element {\n  const dispatch = useDispatch();\n  const {filterByTimeType, filterByNumType, filterByDurationType} = useSelector((state: State) => state);\n\n  return (\n    <div className=\"filter\">\n      <ul className=\"filter__list\">\n        <li className=\"filter__item\">\n          <FormControl>\n            <InputLabel id=\"time-filter-label\">Период</InputLabel>\n            <Select\n              labelId=\"time-filter-label\"\n              id=\"demo-simple-select-helper\"\n              value={filterByTimeType}\n              label=\"Период\"\n              onChange={(evt) => {\n                dispatch(setFilterByTimeAction(evt.target.value));\n                dispatch(setPaginationAction(0));\n              }}\n            >\n              {FILTER_BY_TIME_TYPES.map((item) => (\n                <MenuItem\n                  key={item.value}\n                  value={item.value}\n                >\n                  {item.text}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </li>\n        <li className=\"filter__item\">\n          <TextField\n            id=\"search\"\n            label=\"Номер\"\n            variant=\"outlined\"\n            value={filterByNumType}\n            onChange={(evt) => {\n              dispatch(setFilterByNumAction(evt.target.value));\n              dispatch(setPaginationAction(0));\n            }}\n          />\n        </li>\n        <li className=\"filter__item\">\n          <FormControl>\n            <InputLabel id=\"duration-filter-label\">Длительность</InputLabel>\n            <Select\n              labelId=\"duration-filter-label\"\n              id=\"duration-filter\"\n              value={filterByDurationType}\n              label=\"Длительность\"\n              onChange={(evt) => {\n                dispatch(setFilterByDurationAction(evt.target.value));\n                dispatch(setPaginationAction(0));\n              }}\n            >\n              {FILTER_BY_DURATION_TYPES.map((item) => (\n                <MenuItem\n                  key={item.value}\n                  value={item.value}\n                >\n                  {item.text}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </li>\n        <li className=\"filter__item\">\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              dispatch(setFilterByTimeAction(''));\n              dispatch(setFilterByNumAction(''));\n              dispatch(setFilterByDurationAction(''));\n              dispatch(setPaginationAction(0));\n            }}\n          >\n            Сбросить фильтр\n          </Button>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Filter;\n","import {State, Message} from '../types';\nimport {filterByTime, filterByNum, filterByDuration} from '../utils';\n\nexport const getMessages = (state: State): Message[] => {\n  const {messages, filterByTimeType, filterByNumType, filterByDurationType} = state;\n\n  return [...messages]\n    .sort((a: Message, b: Message) => b.received.getTime() - a.received.getTime())\n    .filter((item) => filterByTime(item.received, filterByTimeType))\n    .filter((item) => filterByNum(item.from, filterByNumType))\n    .filter((item) => filterByDuration(item.duration, filterByDurationType));\n};\n","export const filterByTime = (date: Date, type: string) => {\n  const DAY = 24 * 60 * 60 * 1000;\n  const WEEK = 7 * 24 * 60 * 60 * 1000;\n  const now = new Date();\n  const today = new Date().setHours(0, 0, 0, 0);\n\n  switch (type) {\n    case 'today':\n      return today === new Date(date.getTime()).setHours(0, 0, 0, 0);\n    case 'yesterday':\n      return today === new Date(date.getTime()).setHours(0, 0, 0, 0) + DAY;\n    case 'week':\n      return today < new Date(date.getTime()).setHours(0, 0, 0, 0) + WEEK;\n    case 'month':\n      return now.getMonth() === date.getMonth() && now.getFullYear() === date.getFullYear();\n    case 'lastMonth':\n      return now.getMonth() - 1 === date.getMonth() && now.getFullYear() === date.getFullYear();\n    default:\n      return true;\n  }\n};\n\nexport const filterByNum = (str: string, type: string) => str.includes(type);\n\nexport const filterByDuration = (duration: number, type: string) => {\n  switch (type) {\n    case '1':\n      return duration < 60 * 1;\n    case '3':\n      return duration < 60 * 3;\n    case '5':\n      return duration < 60 * 5;\n    case '10':\n      return duration < 60 * 10;\n    default:\n      return true;\n  }\n};\n","import {useSelector} from 'react-redux';\nimport {getMessages} from '../../store/selectors';\nimport {MESSAGES_PER_PAGE} from '../../consts';\nimport {State} from '../../types';\n\n\nfunction Messages(): JSX.Element {\n  const messages = useSelector(getMessages);\n  const {pagination} = useSelector((state: State) => state);\n  const paginatedMessages = [...messages].filter((_item, i) => i >= pagination * MESSAGES_PER_PAGE && i < pagination * MESSAGES_PER_PAGE + MESSAGES_PER_PAGE);\n\n  return (\n    <div className=\"messages\">\n      <table className=\"messages__table\">\n        <thead>\n          <tr className=\"messages__tr\">\n            <th className=\"messages__th\">Дата</th>\n            <th className=\"messages__th\">Номер</th>\n            <th className=\"messages__th\">Длительность</th>\n            <th className=\"messages__th messages__th--last\">Запись сообщения</th>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedMessages.map((item) => {\n            const date = item.received.toLocaleString();\n            const durationMin = Math.floor(item.duration / 60) ? `${Math.floor(item.duration / 60)} мин` : '';\n            const durationSec = item.duration % 60 ? `${item.duration % 60} сек` : '';\n            return (\n              <tr className=\"messages__tr\" key={item.id}>\n                <td className=\"messages__td\">{date}</td>\n                <td className=\"messages__td\">{item.from}</td>\n                <td className=\"messages__td\">{`${durationMin} ${durationSec}`}</td>\n                <td className=\"messages__td messages__td--last\"><audio controls src={item.mime.mime.dispositionFilename}></audio></td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Messages;\n","import {useSelector, useDispatch} from 'react-redux';\nimport {Pagination} from '@mui/material';\nimport {getMessages} from '../../store/selectors';\nimport {setPaginationAction} from '../../store/actions';\nimport {MESSAGES_PER_PAGE} from '../../consts';\nimport {State} from '../../types';\n\n\nfunction BottomPagination(): JSX.Element {\n  const dispatch = useDispatch();\n  const messages = useSelector(getMessages);\n  const {pagination} = useSelector((state: State) => state);\n  const count = Math.ceil(messages.length / MESSAGES_PER_PAGE);\n\n  return (\n    <div className=\"bottom-pagination\">\n      {count > 1 && (\n        <Pagination\n          count={count}\n          page={pagination + 1}\n          color=\"primary\"\n          onChange={(_evt, value) => {\n            dispatch(setPaginationAction(value - 1));\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default BottomPagination;\n","import Header from '../header/header';\nimport Filter from '../filter/filter';\nimport Messages from '../messages/messages';\nimport Pagination from '../bottom-pagination/bottom-pagination';\n\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"app container\">\n      <Header />\n      <Filter />\n      <Messages />\n      <Pagination />\n    </div>\n  );\n}\n\nexport default App;\n","import {createReducer} from '@reduxjs/toolkit';\nimport {setMessages, setPaginationAction, setFilterByTimeAction, setFilterByNumAction, setFilterByDurationAction} from './actions';\nimport {State} from '../types';\n\n\nconst initialState: State = {\n  messages: [],\n  pagination: 0,\n  filterByTimeType: '',\n  filterByNumType: '',\n  filterByDurationType: '',\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(setMessages, (state, action) => {\n      state.messages = action.payload;\n    })\n    .addCase(setPaginationAction, (state, action) => {\n      state.pagination = action.payload;\n    })\n    .addCase(setFilterByTimeAction, (state, action) => {\n      state.filterByTimeType = action.payload;\n    })\n    .addCase(setFilterByNumAction, (state, action) => {\n      state.filterByNumType = action.payload;\n    })\n    .addCase(setFilterByDurationAction, (state, action) => {\n      state.filterByDurationType = action.payload;\n    });\n});\n\nexport {reducer};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport App from './components/app/app';\nimport {reducer} from './store/reducer';\nimport thunkMiddleware from 'redux-thunk';\nimport {fetchMessagesAction} from './store/actions';\nimport {ThunkAppDispatch} from './types';\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunkMiddleware),\n);\n\n(store.dispatch as ThunkAppDispatch)(fetchMessagesAction());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ToastContainer />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}